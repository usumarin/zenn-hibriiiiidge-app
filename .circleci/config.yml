version: 2.1
orbs:
  ruby: circleci/ruby@0.1.2
  aws-ecr: circleci/aws-ecr@6.12.2
  aws-ecs: circleci/aws-ecs@1.3.0

jobs:
  test_backend:
    docker:
      - image: circleci/ruby:2.7.0
        environment:
          RAILS_ENV: test
          DB_HOST: 127.0.0.1
      - image: circleci/mysql:5.7.30
    working_directory: ~/repo

    steps:
      - checkout

      # restore gem from cache
      - restore_cache:
          keys:
            - gem-cache-v1-{{ checksum "~/repo/backend/Gemfile.lock" }}
            - gem-cache-v1-
          working_directory: ~/repo/backend

      # gem install
      - run:
          command: |
            gem install bundler
            bundle config set path 'vendor/bundle'
            bundle install --jobs=4 --retry=3
          working_directory: ~/repo/backend

      - save_cache:
          key: gem-cache-v1-{{ checksum "~/repo/backend/Gemfile.lock" }}
          paths:
            - ~/repo/backend/vendor/bundle
          working_directory: ~/repo/backend

      # Database setup
      - run:
          command: bundle exec rails db:create
          working_directory: ~/repo/backend
      - run:
          command: bundle exec rails db:migrate
          working_directory: ~/repo/backend

      - run:
          name: create directory to store test results
          command: mkdir /tmp/test-results
          working_directory: ~/repo/backend

      # run tests
      - run:
          name: RSpec
          command: |
            bundle exec rspec $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings) \
              || (printf "===== RETRYING...\n\n\n"; bundle exec rspec --only-failures)
          working_directory: ~/repo/backend

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          description: test-results
      - store_artifacts:
          path: /home/circleci/repo/tmp/screenshots

  test_frontend:
    docker:
      - image: circleci/node:14.4
        environment:
          NODE_ENV: test
    working_directory: ~/repo

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "~/repo/frontend/package.json" }}
          working_directory: ~/repo/frontend
      - run:
          name: install packages
          command: npm install
          working_directory: ~/repo/frontend
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "~/repo/frontend/package.json" }}
          working_directory: ~/repo/frontend
      - run:
          name: test
          command: npm run test
          working_directory: ~/repo/frontend

  build_and_push_image_backend:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - aws-ecr/build-and-push-image:
          account-url: AWS_ACCOUNT_URL
          repo: "zenn-app-backend"
          region: AWS_REGION
          tag: "${CIRCLE_SHA1}"
          path: ./backend/
  build_and_push_image_frontend:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - aws-ecr/build-and-push-image:
          account-url: AWS_ACCOUNT_URL
          repo: "zenn-app-frontend"
          region: AWS_REGION
          tag: "${CIRCLE_SHA1}"
          path: ./frontend/

workflows:
  version: 2
  test:
    jobs:
      - test_backend:
          filters:
            branches:
              ignore: main
      - test_frontend:
          filters:
            branches:
              ignore: main
  test_and_deploy:
    jobs:
      - test_backend:
          filters:
            branches:
              only: main
      - test_frontend:
          filters:
            branches:
              only: main
      - build_and_push_image_backend:
          requires:
            - test_frontend
            - test_backend
          filters:
            branches:
              only: main
      - build_and_push_image_frontend:
          requires:
            - test_frontend
            - test_backend
          filters:
            branches:
              only: main
      - aws-ecs/deploy-service-update:
          requires:
            - build_and_push_image_backend
            - build_and_push_image_frontend
          family: "zenn-app-task-backend"
          service-name: "zenn-app-service-backend"
          cluster-name: "zenn-app-cluster"
          container-image-name-updates: "container=zenn-app-container-backend,tag=${CIRCLE_SHA1}"
          filters:
            branches:
              only: main
      - aws-ecs/deploy-service-update:
          requires:
            - build_and_push_image_backend
            - build_and_push_image_frontend
          family: "zenn-app-frontend"
          service-name: "zenn-app-service-frontend"
          cluster-name: "zenn-app-cluster"
          container-image-name-updates: "container=zenn-app-container-frontend,tag=${CIRCLE_SHA1}"
          filters:
            branches:
              only: main
